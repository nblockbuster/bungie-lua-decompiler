#![allow(non_camel_case_types)]
#![allow(dead_code)]

// from https://github.com/FaberTheCatgirl/Halo-Infinite-Tag-Editor/blob/master/Halo-Infinite-Tag-Editor/HavokTools/HksOpCodes.cs

#[derive(Debug, PartialEq, Eq, Hash, Clone, Copy)]
#[repr(u8)]
pub enum OpCode
{
    GETFIELD,
    TEST,
    CALL_I,
    CALL_C,
    EQ,
    EQ_BK,
    GETGLOBAL,
    MOVE,
    SELF,
    RETURN,
    GETTABLE_S,
    GETTABLE_N,
    GETTABLE,
    LOADBOOL,
    TFORLOOP,
    SETFIELD,
    SETTABLE_S,
    SETTABLE_S_BK,
    SETTABLE_N,
    SETTABLE_N_BK,
    SETTABLE,
    SETTABLE_BK,
    TAILCALL_I,
    TAILCALL_C,
    TAILCALL_M,
    LOADK,
    LOADNIL,
    SETGLOBAL,
    JMP,
    CALL_M,
    CALL,
    INTRINSIC_INDEX,
    INTRINSIC_NEWINDEX,
    INTRINSIC_SELF,
    INTRINSIC_LITERAL,
    INTRINSIC_NEWINDEX_LITERAL,
    INTRINSIC_SELF_LITERAL,
    TAILCALL,
    GETUPVAL,
    SETUPVAL,
    ADD,
    ADD_BK,
    SUB,
    SUB_BK,
    MUL,
    MUL_BK,
    DIV,
    DIV_BK,
    MOD,
    MOD_BK,
    POW,
    POW_BK,
    NEWTABLE,
    UNM,
    NOT,
    LEN,
    LT,
    LT_BK,
    LE,
    LE_BK,
    CONCAT,
    TESTSET,
    FORPREP,
    FORLOOP,
    SETLIST,
    CLOSE,
    CLOSURE,
    VARARG,
    TAILCALL_I_R1,
    CALL_I_R1,
    SETUPVAL_R1,
    TEST_R1,
    NOT_R1,
    GETFIELD_R1,
    SETFIELD_R1,
    NEWSTRUCT,
    DATA,
    SETSLOTN,
    SETSLOTI,
    SETSLOT,
    SETSLOTS,
    SETSLOTMT,
    CHECKTYPE,
    CHECKTYPES,
    GETSLOT,
    GETSLOTMT,
    SELFSLOT,
    SELFSLOTMT,
    GETFIELD_MM,
    CHECKTYPE_D,
    GETSLOT_D,
    GETGLOBAL_MEM,
    NUM_OPCODES
}

impl Default for OpCode {
    fn default() -> Self{
        OpCode::GETFIELD
    }
}

impl From<u8> for OpCode {
    fn from(val: u8) -> Self {
        match val {
            0 => OpCode::GETFIELD,
            1 => OpCode::TEST,
            2 => OpCode::CALL_I,
            3 => OpCode::CALL_C,
            4 => OpCode::EQ,
            5 => OpCode::EQ_BK,
            6 => OpCode::GETGLOBAL,
            7 => OpCode::MOVE,
            8 => OpCode::SELF,
            9 => OpCode::RETURN,
            10 => OpCode::GETTABLE_S,
            11 => OpCode::GETTABLE_N,
            12 => OpCode::GETTABLE,
            13 => OpCode::LOADBOOL,
            14 => OpCode::TFORLOOP,
            15 => OpCode::SETFIELD,
            16 => OpCode::SETTABLE_S,
            17 => OpCode::SETTABLE_S_BK,
            18 => OpCode::SETTABLE_N,
            19 => OpCode::SETTABLE_N_BK,
            20 => OpCode::SETTABLE,
            21 => OpCode::SETTABLE_BK,
            22 => OpCode::TAILCALL_I,
            23 => OpCode::TAILCALL_C,
            24 => OpCode::TAILCALL_M,
            25 => OpCode::LOADK,
            26 => OpCode::LOADNIL,
            27 => OpCode::SETGLOBAL,
            28 => OpCode::JMP,
            29 => OpCode::CALL_M,
            30 => OpCode::CALL,
            31 => OpCode::INTRINSIC_INDEX,
            32 => OpCode::INTRINSIC_NEWINDEX,
            33 => OpCode::INTRINSIC_SELF,
            34 => OpCode::INTRINSIC_LITERAL,
            35 => OpCode::INTRINSIC_NEWINDEX_LITERAL,
            36 => OpCode::INTRINSIC_SELF_LITERAL,
            37 => OpCode::TAILCALL,
            38 => OpCode::GETUPVAL,
            39 => OpCode::SETUPVAL,
            40 => OpCode::ADD,
            41 => OpCode::ADD_BK,
            42 => OpCode::SUB,
            43 => OpCode::SUB_BK,
            44 => OpCode::MUL,
            45 => OpCode::MUL_BK,
            46 => OpCode::DIV,
            47 => OpCode::DIV_BK,
            48 => OpCode::MOD,
            49 => OpCode::MOD_BK,
            50 => OpCode::POW,
            51 => OpCode::POW_BK,
            52 => OpCode::NEWTABLE,
            53 => OpCode::UNM,
            54 => OpCode::NOT,
            55 => OpCode::LEN,
            56 => OpCode::LT,
            57 => OpCode::LT_BK,
            58 => OpCode::LE,
            59 => OpCode::LE_BK,
            60 => OpCode::CONCAT,
            61 => OpCode::TESTSET,
            62 => OpCode::FORPREP,
            63 => OpCode::FORLOOP,
            64 => OpCode::SETLIST,
            65 => OpCode::CLOSE,
            66 => OpCode::CLOSURE,
            67 => OpCode::VARARG,
            68 => OpCode::TAILCALL_I_R1,
            69 => OpCode::CALL_I_R1,
            70 => OpCode::SETUPVAL_R1,
            71 => OpCode::TEST_R1,
            72 => OpCode::NOT_R1,
            73 => OpCode::GETFIELD_R1,
            74 => OpCode::SETFIELD_R1,
            75 => OpCode::NEWSTRUCT,
            76 => OpCode::DATA,
            77 => OpCode::SETSLOTN,
            78 => OpCode::SETSLOTI,
            79 => OpCode::SETSLOT,
            80 => OpCode::SETSLOTS,
            81 => OpCode::SETSLOTMT,
            82 => OpCode::CHECKTYPE,
            83 => OpCode::CHECKTYPES,
            84 => OpCode::GETSLOT,
            85 => OpCode::GETSLOTMT,
            86 => OpCode::SELFSLOT,
            87 => OpCode::SELFSLOTMT,
            88 => OpCode::GETFIELD_MM,
            89 => OpCode::CHECKTYPE_D,
            90 => OpCode::GETSLOT_D,
            91 => OpCode::GETGLOBAL_MEM,
            _ => panic!("Invalid OpCode"),
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum OpMode {
    iABC,
    iABx,
    iAsBx
}

impl Default for OpMode {
    fn default() -> Self {
        OpMode::iABC
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum OpArgModeA {
    UNUSED,
    REG
}

impl Default for OpArgModeA {
    fn default() -> Self {
        OpArgModeA::UNUSED
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum OpArgModeBC {
    UNUSED,
    NUMBER,
    OFFSET,
    REG,
    REG_OR_CONST,
    CONST
}

impl Default for OpArgModeBC {
    fn default() -> Self {
        OpArgModeBC::UNUSED
    }
}

#[derive(Debug, Clone, Copy)]
pub enum OpArgMode {
    NUMBER,
    REG,
    CONST
}

impl Default for OpArgMode {
    fn default() -> Self {
        OpArgMode::NUMBER
    }
}

#[derive(Debug, Clone, Copy, Default)]
pub struct OpModes {
    pub opcode: OpCode,
    pub mode: OpMode,
    pub arg_mode_a: OpArgModeA,
    pub arg_mode_b: OpArgModeBC,
    pub arg_mode_c: OpArgModeBC,
}

pub static OP_MODES: [OpModes; 92] = [
    OpModes {
        opcode: OpCode::GETFIELD,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::CONST,
    },
    OpModes {
        opcode: OpCode::TEST,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::UNUSED,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::CALL_I,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::CALL_C,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::REG,
    },
    OpModes {
        opcode: OpCode::EQ,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::UNUSED,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::EQ_BK,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::UNUSED,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::GETGLOBAL,
        mode: OpMode::iABx,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::CONST,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::MOVE,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::SELF,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::RETURN,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::GETTABLE_S,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::GETTABLE_N,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::GETTABLE,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::LOADBOOL,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::TFORLOOP,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::UNUSED,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::SETFIELD,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::SETTABLE_S,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::SETTABLE_S_BK,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::SETTABLE_N,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::SETTABLE_N_BK,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::SETTABLE,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::SETTABLE_BK,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::TAILCALL_I,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::TAILCALL_C,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::TAILCALL_M,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::LOADK,
        mode: OpMode::iABx,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::CONST,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::LOADNIL,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::SETGLOBAL,
        mode: OpMode::iABx,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::CONST,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::JMP,
        mode: OpMode::iAsBx,
        arg_mode_a: OpArgModeA::UNUSED,
        arg_mode_b: OpArgModeBC::OFFSET,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::CALL_M,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::CALL,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::INTRINSIC_INDEX,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::INTRINSIC_NEWINDEX,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::INTRINSIC_SELF,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::INTRINSIC_LITERAL,
        mode: OpMode::iABx,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::INTRINSIC_NEWINDEX_LITERAL,
        mode: OpMode::iABx,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::INTRINSIC_SELF_LITERAL,
        mode: OpMode::iABx,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::TAILCALL,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::GETUPVAL,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::SETUPVAL,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::ADD,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::ADD_BK,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::SUB,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::SUB_BK,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::MUL,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::MUL_BK,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::DIV,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::DIV_BK,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::MOD,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::MOD_BK,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::POW,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::POW_BK,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::NEWTABLE,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::UNM,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::NOT,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::LEN,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::LT,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::UNUSED,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::LT_BK,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::UNUSED,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::LE,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::UNUSED,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::LE_BK,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::UNUSED,
        arg_mode_b: OpArgModeBC::REG_OR_CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::CONCAT,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::TESTSET,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::FORPREP,
        mode: OpMode::iAsBx,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::OFFSET,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::FORLOOP,
        mode: OpMode::iAsBx,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::OFFSET,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::SETLIST,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::OFFSET,
    },
    OpModes {
        opcode: OpCode::CLOSE,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::UNUSED,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::CLOSURE,
        mode: OpMode::iABx,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::VARARG,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::TAILCALL_I_R1,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::UNUSED,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::CALL_I_R1,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::UNUSED,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::SETUPVAL_R1,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::TEST_R1,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::UNUSED,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::NOT_R1,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::GETFIELD_R1,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::CONST,
    },
    OpModes {
        opcode: OpCode::SETFIELD_R1,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::CONST,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::NEWSTRUCT,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::DATA,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::UNUSED,
        arg_mode_b: OpArgModeBC::OFFSET,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::SETSLOTN,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::UNUSED,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::SETSLOTI,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::SETSLOT,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::SETSLOTS,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::REG,
    },
    OpModes {
        opcode: OpCode::SETSLOTMT,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::REG_OR_CONST,
    },
    OpModes {
        opcode: OpCode::CHECKTYPE,
        mode: OpMode::iABx,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::CHECKTYPES,
        mode: OpMode::iABx,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::GETSLOT,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::GETSLOTMT,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::SELFSLOT,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::SELFSLOTMT,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::GETFIELD_MM,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::CONST,
    },
    OpModes {
        opcode: OpCode::CHECKTYPE_D,
        mode: OpMode::iABx,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::NUMBER,
        arg_mode_c: OpArgModeBC::UNUSED,
    },
    OpModes {
        opcode: OpCode::GETSLOT_D,
        mode: OpMode::iABC,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::REG,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
    OpModes {
        opcode: OpCode::GETGLOBAL_MEM,
        mode: OpMode::iABx,
        arg_mode_a: OpArgModeA::REG,
        arg_mode_b: OpArgModeBC::CONST,
        arg_mode_c: OpArgModeBC::NUMBER,
    },
];